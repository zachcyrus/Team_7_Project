# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
    paths:
      - mafia/**
  #pull_request:
    #branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mafia
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
          
      - name: Export region for boto3
        run: echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
      - name: Set up and Run Tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
     # - name: Test with pytest
        #run: python -m pytest 
  

  Deploy: 
    # requires the test job to be done before going onto deploy
    needs: build_and_test
    #runs on a ubuntu environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        #uses a github repo to configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        #id which can be utilized as a variable later
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: 1.${{ github.run_number }}
        run: |
          docker build --build-arg ADMIN_KEY=${{  secrets.ADMIN_KEY }} --build-arg LOGGER_AWS_ACCESS_KEY_ID=${{  secrets.LOGGER_AWS_ACCESS_KEY_ID  }} --build-arg LOGGER_AWS_ACCESS_KEY_SECRET=${{  secrets.LOGGER_AWS_ACCESS_KEY_SECRET  }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
      


